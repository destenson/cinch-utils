#! /usr/bin/env python2

#------------------------------------------------------------------------------#
# Script to mirror a list of git repositories specified in a json file.
#------------------------------------------------------------------------------#

import os
import shutil
import tempfile
import argparse
import json
from sh import cd
from sh import git
from sh import tar
from sh import xf
from collections import OrderedDict

#------------------------------------------------------------------------------#
# Context manager.
#------------------------------------------------------------------------------#

class cd:
	"""Context manager for changing the current working directory"""

	def __init__(self, newPath):
		self.newPath = os.path.expanduser(newPath)
	# __init__

	def __enter__(self):
		self.savedPath = os.getcwd()
		os.chdir(self.newPath)
	# __enter__

	def __exit__(self, etype, value, traceback):
		os.chdir(self.savedPath)
	# __exit__

# class cd

#------------------------------------------------------------------------------#
# Clone a repository in mirroring mode.
#------------------------------------------------------------------------------#

def clone_mirror(src, directory, args):

	if(args.debug or args.verbose):
		print "Cloning source repository", \
			src, "into", directory
	# if
			
	git.clone("--mirror", src, directory)

# clone_mirror

#------------------------------------------------------------------------------#
# Push a repository in mirroring mode.
#------------------------------------------------------------------------------#

def push_mirror(dest, directory, args):

	if(args.debug or args.verbose):
		print "Pushing into", dest, "from", directory
	# if

	with cd(directory):
		git.push("--mirror", dest)
	# with

# push_mirror

#------------------------------------------------------------------------------#
# Create a tar archive suitable for transfer to red network
#------------------------------------------------------------------------------#

def create_archive(src, directory, archive_name, args):

	if(args.debug or args.verbose):
		print "Creating tar archive ", archive_name, "from", src
	# if

	with cd(directory):
		tar("xvjf", archive_name, src)
	# with

# create_archive

#------------------------------------------------------------------------------#
# Expand a tar archive
#------------------------------------------------------------------------------#

def expand_archive(directory, archive_name, args):

	if(args.debug or args.verbose):
		print "Expanding tar archive ", archive_name, "to", src
	# if

	with cd(directory):
		tar("cvjf", archive_name)
	# with

# expand_archive

#------------------------------------------------------------------------------#
# Transfer a file to the red network
#------------------------------------------------------------------------------#

def transfer_file(directory, filename, args):

	if(args.debug or args.verbose):
		print "Transferring", filename, "to the red network"
	# if

# transfer_file

#------------------------------------------------------------------------------#
# Parse arguments.
#------------------------------------------------------------------------------#

parser = argparse.ArgumentParser(prog='mirror')
parser.add_argument('config',
	help='The JSON configuration file specifying the mirror information')

parser.add_argument('-d', '--debug', action="store_true",
	help="Turn on extra debug information and do not clean up temporaries." +
		" Implies --verbose.")

parser.add_argument('-v', '--verbose', action="store_true",
	help="Turn on verbose output.")

args = parser.parse_args()

#------------------------------------------------------------------------------#
# Begin main.
#------------------------------------------------------------------------------#

# Read the configuration file
with open(args.config) as fd:
	config = json.load(fd, object_pairs_hook=OrderedDict)

# Iterate over the JSON entries.
for item in config:

	# Print which operation the item is doing
	if(args.debug or args.verbose):
		print "Executing operation:", item["operation"]
	
	# Handle directories if necessary
	if("directory" in item):
		# Use the directory specified by the user.
		directory = item["directory"]
	else:
		# Create a temporary directory if the user hasn't specified one.
		directory = tempfile.mkdtemp()

		if(args.debug or args.verbose):
			print "Created temporary directory:", directory
		# if
	# if

	# Create clone mirror if we are mirroring or cloning
	if(item["operation"] == "mirror" or item["operation"] == "clone"):
		clone_mirror(item["src"], directory, args)
	# if

	# Push the mirror if we are mirroring or pushing
	if(item["operation"] == "mirror" or item["operation"] == "push"):
		push_mirror(item["dest"], directory, args)
	# if

	# Create an archive
	if(item["operation"] == "archive"):
		create_archive(item["src"], directory, item["filename"], args)
	# if

	# Create an archive
	if(item["operation"] == "expand"):
		expand_archive(directory, item["filename"], args)
	# if

	# Push an archive to the red network
	if(item["operation"] == "transfer"):
		transfer_file(directory, item["filename"])
	# if

	# Clean up if we created a temporary
	if(not args.debug and not "directory" in item):
		shutil.rmtree(directory)

		if(args.debug or args.verbose):
			print "Removed temporary directory: ", directory
		#if
	# if

	# New line for output
	if(args.debug or args.verbose):
		print "\n"
	# if

# for
