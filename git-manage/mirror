#! /usr/bin/env python2

import os
import shutil
import tempfile
from sh import git
from sh import cd

#------------------------------------------------------------------------------#
# Notes:
#   - sh calls must use comma delimited list of arguments. More than one
#     argument in quotations may not work.
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# Repositories
#------------------------------------------------------------------------------#

gtest_root = "git@gitlab.lanl.gov:ngc-utils/gtest.git"
gtest_mirror = "ssh://git@xcp-stash.lanl.gov:7999/ngc/gtest.git"
cinch_root = "git@gitlab.lanl.gov:ngc-utils/cinch.git"
cinch_mirror = "ssh://git@xcp-stash.lanl.gov:7999/ngc/cinch.git"
cinch_utils_root = "git@gitlab.lanl.gov:ngc-utils/cinch-utils.git"
cinch_utils_mirror = "ssh://git@xcp-stash.lanl.gov:7999/ngc/cinch-utils.git"

#------------------------------------------------------------------------------#
# Context manager
#------------------------------------------------------------------------------#

class cd:
    """Context manager for changing the current working directory"""
    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)

#------------------------------------------------------------------------------#
# Begin main
#------------------------------------------------------------------------------#

tmpdir = tempfile.mkdtemp()
print tmpdir

with cd(tmpdir):

    #--------------------------------------------------------------------------#
    # Mirror gtest
    #--------------------------------------------------------------------------#

    git.clone("--bare", gtest_root)

    with cd("gtest.git"):
        git.push("--mirror", gtest_mirror)

    # cleanup
    shutil.rmtree("gtest.git")

    #--------------------------------------------------------------------------#
    # Mirror cinch and update gtest submodule
    #--------------------------------------------------------------------------#

    git.clone("--bare", cinch_root)

    with cd("cinch.git"):
        git.push("--mirror", cinch_mirror)

    # cleanup
    shutil.rmtree("cinch.git")

    # clone from mirrored source
    git.clone(cinch_mirror)

    # update submodule path
    with cd("cinch"):
        with open(".gitmodules", "w") as fd:
            fd.write("[submodule \"gtest\"]\n\tpath = gtest\n\turl = " + \
                gtest_mirror)

        git.add(".gitmodules")
        git.commit("-m \"Mirror Update\"")
        git.push()

    # cleanup
    shutil.rmtree("cinch")

    #--------------------------------------------------------------------------#
    # Mirror cinch-utils and update cinch submodule
    #--------------------------------------------------------------------------#

    git.clone("--bare", cinch_utils_root)

    with cd("cinch-utils.git"):
        git.push("--mirror", cinch_utils_mirror)

    # clone from mirrored source
    git.clone(cinch_utils_mirror)

    # update submodule path
    with cd("cinch-utils"):
        with open(".gitmodules", "w") as fd:
            fd.write("[submodule \"cinch\"]\n\tpath = cinch\n\turl = " + \
                cinch_mirror)

        git.add(".gitmodules")
        git.commit("-m \"Mirror Update\"")
        git.push()

        git.submodule.update("--init", "--recursive")
        git.submodule.foreach("--recursive", "git checkout master; git pull")
        git.add("cinch")
        git.commit("-m \"Mirror Update\"")
        git.push()

    # cleanup
    shutil.rmtree("cinch-utils")

shutil.rmtree(tmpdir)

#------------------------------------------------------------------------------#
# vim: set tabstop=4 shiftwidth=4 expandtab:
#------------------------------------------------------------------------------#
